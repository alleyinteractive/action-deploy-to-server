name: 'Deploy to Server Action'
description: 'Deploys files to a remote server using rsync and (optionally) executes remote commands'
author: 'alleyinteractive'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  server_user:
    description: 'Username for the remote server'
    required: true
  server_ip:
    description: 'IP address of the remote server'
    required: true
  source_directory:
    description: 'Source directory to deploy'
    required: false
    default: '.'
  destination_directory:
    description: 'Destination directory on the remote server (relative to server_user home directory)'
    required: true
  exclude_list:
    description: 'Comma-separated list of files and directories to exclude from sync'
    required: false
    default: '.git,node_modules,.env'
  ssh_private_key:
    description: 'SSH private key for authentication'
    required: true
  remote_commands:
    description: 'Commands to execute on the remote server after deployment'
    required: false
    default: ''
  delete_extraneous_files_from_destination:
    description: 'Delete extraneous files from the destination directory on the remote server (rsync --delete)'
    required: false
    default: 'true'
  dry_run:
    description: 'Perform a dry run of the rsync command (rsync --dry-run)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Install rsync
      run: sudo apt-get install -y rsync
      shell: bash

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_private_key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ inputs.server_ip }} >> ~/.ssh/known_hosts
      shell: bash

    - name: Deploy to server
      env:
        EXCLUDE_LIST: ${{ inputs.exclude_list }}
        SOURCE_DIR: ${{ inputs.source_directory }}
        DEST_DIR: ${{ inputs.destination_directory }}
        SERVER_USER: ${{ inputs.server_user }}
        SERVER_IP: ${{ inputs.server_ip }}
      run: |
        # Ensure trailing slashes for directories
        SOURCE_DIR="${SOURCE_DIR%/}/"
        DEST_DIR="${DEST_DIR%/}/"

        # Make a temporary directory to the rsync exclude list
        EXCLUDE_DIR=$(mktemp -d)

        IFS=',' read -ra EXCLUDES <<< "$EXCLUDE_LIST"
        for EXCLUDE in "${EXCLUDES[@]}"; do
          echo "$EXCLUDE" >> "$EXCLUDE_DIR/.rsync-exclude"
        done

        echo "Exclusions via $EXCLUDE_DIR/.rsync-exclude:"
        cat "$EXCLUDE_DIR/.rsync-exclude"

        # Set dry run option:
        if [ "${{ inputs.dry_run }}" == "true" ]; then
          DRY_RUN_OPTION="--dry-run"
        else
          DRY_RUN_OPTION=""
        fi

        if [ "${{ inputs.delete_extraneous_files_from_destination }}" == "true" ]; then
          DELETE_OPTION="--delete"
        else
          DELETE_OPTION=""
        fi

        echo "Deploying from $SOURCE_DIR to $SERVER_USER@$SERVER_IP:$DEST_DIR"
        rsync \
          -avz \
          $DRY_RUN_OPTION \
          $DELETE_OPTION \
          --exclude-from="$EXCLUDE_DIR/.rsync-exclude" \
          "$SOURCE_DIR" "$SERVER_USER@$SERVER_IP:$DEST_DIR"

      shell: bash

    - name: Execute remote commands
      if: inputs.remote_commands != ''
      env:
        REMOTE_COMMANDS: ${{ inputs.remote_commands }}
        SERVER_USER: ${{ inputs.server_user }}
        SERVER_IP: ${{ inputs.server_ip }}
        DEST_DIR: ${{ inputs.destination_directory }}
        DRY_RUN: ${{ inputs.dry_run }}
      run: |
        # If dry run, echo commands but do not run:
        if [[ "$DRY_RUN" == "true" ]]; then
          echo "WARNING: dry_run is enabled; not running commands:" 1>&2
          echo "$REMOTE_COMMANDS" 1>&2
          exit 0
        fi

        # Ensure trailing slash for destination directory
        DEST_DIR="${DEST_DIR%/}/"

        # Create a specific script name using the GitHub commit SHA
        SCRIPT_NAME="action-deploy-to-server-${GITHUB_SHA}.sh"
        TEMP_SCRIPT="/tmp/${SCRIPT_NAME}"

        # Write commands to the temporary script file
        cat << EOF > "$TEMP_SCRIPT"
        #!/bin/bash -euxo pipefail
        cd "$DEST_DIR"
        $REMOTE_COMMANDS
        EOF

        # Make the script executable
        chmod +x "$TEMP_SCRIPT"

        # Copy the script to the remote server
        scp "$TEMP_SCRIPT" "$SERVER_USER@$SERVER_IP:/tmp/${SCRIPT_NAME}"

        # Execute the script on the remote server
        ssh "$SERVER_USER@$SERVER_IP" "bash -ex /tmp/${SCRIPT_NAME}"

        # Clean up: remove the temporary script locally and on the remote server
        rm -f "$TEMP_SCRIPT"
        ssh "$SERVER_USER@$SERVER_IP" "rm -f /tmp/${SCRIPT_NAME}"
      shell: bash